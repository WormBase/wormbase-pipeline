// See the NOTICE file distributed with this work for additional information
// regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

profiles {

    lsf {
        process.executor = 'lsf'
        process.queue = { task.memory < 300.GB ? 'production' : 'bigmem' }
        singularity.enabled = true
        singularity.autoMounts = true
        perJobMemLimit = true
        errorStrategy = { task.exitStatus == 140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }

    lsf_dm {
        process.executor = 'lsf'
        process.queue = 'datamover'
        singularity.enabled = true
        singularity.autoMounts = true
        perJobMemLimit = true
        errorStrategy = { task.exitStatus == 140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }

    slurm {
        process.executor = 'slurm'
        process.queue = { task.memory < 300.GB ? 'standard' : 'bigmem' }
        singularity.enabled = true
        singularity.autoMounts = true
        perJobMemLimit = true
        errorStrategy = { task.exitStatus == 140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }
}

env {
    PYTHONPATH="/hps/software/users/wormbase/digri/repositories/wormbase-pipeline/parasite/modules/CoreCreation:/hps/software/users/wormbase/digri/repositories/wormbase-pipeline/parasite/modules/python:/hps/software/users/wormbase/parasite/software/python_packages/lib/python3.9/site-packages"
}

process {
    withLabel: 'local' {
        executor = 'local'
    }
    withLabel: 'default' {
        cpus = 1
        memory = 100.MB
        time = 1.min
    }
    withLabel: 'normal' {
        cpus = 1
        memory = 1.GB
        time = 60.min
    }
    withLabel: 'variable_2_8_32_1hr' {
        cpus = 1
        time = { 60.min * task.attempt }
        memory = { 2.GB * Math.pow(4, (task.attempt - 1)) }
        errorStrategy = { task.exitStatus == 140 ? 'retry' : 'finish' }
        maxRetries = 3
    }
    withLabel: 'variable_2_8_32_4hr' {
        cpus = 1
        time = { 240.min * task.attempt }
        memory = { 2.GB * Math.pow(4, (task.attempt - 1)) }
        errorStrategy = { task.exitStatus == 140 ? 'retry' : 'finish' }
        maxRetries = 3
    }
    withLabel: 'variable_2_8_32_8hr' {
        cpus = 1
        time = { 480.min * task.attempt }
        memory = { 2.GB * Math.pow(4, (task.attempt - 1)) }
        errorStrategy = { task.exitStatus == 140 ? 'retry' : 'finish' }
        maxRetries = 3
    }
    withLabel: 'variable_2_8_32_24hr' {
        cpus = 1
        time = { 1440.min * task.attempt }
        memory = { 2.GB * Math.pow(4, (task.attempt - 1)) }
        errorStrategy = { task.exitStatus == 140 ? 'retry' : 'finish' }
        maxRetries = 3
    }
    withLabel: 'variable_2_8_32_4days' {
        cpus = 1
        time = { 5760.min * task.attempt }
        memory = { 2.GB * Math.pow(4, (task.attempt - 1)) }
        errorStrategy = { task.exitStatus == 140 ? 'retry' : 'finish' }
        maxRetries = 3
    }           
    withLabel: 'adaptive' {
        cpus = 1
        time = { 60.min * task.attempt }
        memory = { 2.GB * Math.pow(4, (task.attempt - 1)) }
        errorStrategy = { task.exitStatus == 140 ? 'retry' : 'finish' }
        maxRetries = 3
    }
}